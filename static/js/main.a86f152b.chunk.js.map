{"version":3,"sources":["Counter.tsx","Buttons.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Counter","props","className","count","Buttons","onClick","incValue","disabled","resetValue","App","useState","setCount","countPlus","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAOO,SAASA,EAAQC,GACtB,OACE,qBAAKC,UAAW,UAAhB,SACE,sBAAMA,UAA2B,IAAhBD,EAAME,MAAc,WAAa,QAAlD,SACGF,EAAME,UCDR,SAASC,EAAQH,GACtB,OACE,sBAAKC,UAAW,mBAAhB,UACE,wBACEA,UAAW,SACXG,QAASJ,EAAMK,SACfC,SAA0B,IAAhBN,EAAME,MAHlB,iBAOA,wBACED,UAAW,SACXG,QAASJ,EAAMO,WACfD,SAA0B,IAAhBN,EAAME,MAHlB,sBCWSM,MAzBf,WAAgB,IAAD,EACWC,mBAAiB,GAD5B,mBACRP,EADQ,KACDQ,EADC,KAeb,OACE,qBAAKT,UAAW,UAAhB,SACE,sBAAKA,UAAW,eAAhB,UACE,cAACF,EAAD,CAASG,MAAOA,IAChB,cAACC,EAAD,CAASD,MAAOA,EAAOG,SAhBZ,WACf,IAAIM,EAAYT,EAAQ,EACpBS,GAAa,IACfA,EAAY,GAEdD,EAASC,IAWsCJ,WAR9B,WACjBG,EAAS,YCJEE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.a86f152b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\ntype CounterPropsType = {\r\n  count: number;\r\n};\r\n\r\nexport function Counter(props: CounterPropsType) {\r\n  return (\r\n    <div className={'Display'}>\r\n      <span className={props.count === 5 ? 'valueRed' : 'value'}>\r\n        {props.count}\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n","import { setUncaughtExceptionCaptureCallback } from 'node:process';\r\nimport React, { useState } from 'react';\r\nimport './App.css';\r\n\r\ntype ButtonsPropsType = {\r\n  count?: number;\r\n  incValue: () => void;\r\n  resetValue: () => void;\r\n};\r\n\r\nexport function Buttons(props: ButtonsPropsType) {\r\n  return (\r\n    <div className={'ContainerButtons'}>\r\n      <button\r\n        className={'Button'}\r\n        onClick={props.incValue}\r\n        disabled={props.count === 5 ? true : false}\r\n      >\r\n        inc\r\n      </button>\r\n      <button\r\n        className={'Button'}\r\n        onClick={props.resetValue}\r\n        disabled={props.count === 0 ? true : false}\r\n      >\r\n        reset\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Counter } from './Counter';\nimport { Buttons } from './Buttons';\n\nfunction App() {\n  let [count, setCount] = useState<number>(0);\n\n  const incValue = () => {\n    let countPlus = count + 1;\n    if (countPlus >= 5) {\n      countPlus = 5;\n    }\n    setCount(countPlus);\n  };\n\n  const resetValue = () => {\n    setCount(0);\n  };\n\n  return (\n    <div className={'Counter'}>\n      <div className={'AppContainer'}>\n        <Counter count={count} />\n        <Buttons count={count} incValue={incValue} resetValue={resetValue} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}